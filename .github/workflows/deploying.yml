name: Deploy Dev Server

on:
  push:
    branches:
      - develop
env:
  PROJECT_NAME: month-app
  BUCKET_NAME: depromeet-final-bucket
  BUCKET_REGION: ap-northeast-2

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "firebase-admin.json"
          json: ${{ secrets.FIREBASE_ADMIN_JSON }}
          dir: 'month-external/src/main/resources/'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Make deploy/month-app/build/libs/
        run: mkdir -p deploy/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: depromeet-final-ecr
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo -e "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY\nTAG=$IMAGE_TAG" > deploy/.env

      - name: Copy deploy file into deploy/
        run: cp appspec.yml docker-compose.*yml ./scripts/run.sh deploy/

      - name: Zip deploy/
        run: zip -r deploy.zip deploy/

      - name: Upload to S3
        run: aws s3 cp deploy.zip s3://${BUCKET_NAME}/${PROJECT_NAME}-${GITHUB_SHA}.zip --region ${BUCKET_REGION}

      - name: Code Deploy
        env:
          CODE_DEPLOY_APP: depromeet-final-backend
          CODE_DEPLOY_GROUP: dev
        run: aws deploy create-deployment --application-name ${CODE_DEPLOY_APP} --deployment-group-name ${CODE_DEPLOY_GROUP} --s3-location bucket=${BUCKET_NAME},bundleType=zip,key=${PROJECT_NAME}-${GITHUB_SHA}.zip
