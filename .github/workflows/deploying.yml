name: Deploy Dev Server

on:
  push:
    branches:
      - develop
      - feature/deploy
env:
  PROJECT_NAME: month-app

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: checkout@v2
        uses: actions/checkout@v2

      - name: create firebase.admin.json
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "firebase-admin.json"
          json: ${{ secrets.FIREBASE_ADMIN_JSON }}
          dir: 'month-external/src/main/resources/'

      - name: Make deploy/month-app/build/libs/
        run: |
          mkdir -p deploy/
          cp docker-compose.blue.yml docker-compose.green.yml ./scripts/run.sh deploy/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: depromeet-final-ecr
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo -e "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY\nTAG=$IMAGE_TAG" > deploy/.env

      - name: zip deploy.zip
        run: zip -r deploy.zip deploy

      - name: Upload deploy.zip
        uses: actions/upload-artifact@v2
        with:
          name: deploy.zip
          path: deploy.zip

  deploy:
    name: deploy
    needs:
      - build
    runs-on: jello-server
    steps:
      - name: Download deploy.zip
        uses: actions/download-artifact@v2
        with:
          name: deploy.zip

      - name: run server
        run: |
          unzip -o ./deploy.zip
          cd deploy/
          sh ./run.sh